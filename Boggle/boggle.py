# -*- coding: utf-8 -*-
"""Boggle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mOIZc8ONz4wXVH36J2NIHx-NfRQxgMFq
"""

class TrieNode:
  def __init__(self):
    self.arr = [None]*26
    self.end = False

class Trie:
  def __init__(self):
    self.root = TrieNode()
  
  def insertWord(self,dictionaryWords):
    word = self.root

    for i in range(len(dictionaryWords)):
      present = dictionaryWords[i]
      index = ord(present)-65
      if word.arr[index]==None:
        temp = TrieNode()
        word.arr[index] = temp
        word = temp
      else:
        word = word.arr[index]
    
    word.end = True

  def searchPrefix(self,prefix):
    pref = self.root
    for i in range(len(prefix)):
      present = prefix[i]
      index = ord(present) - 65
      if pref.arr[index]!=None:
        pref = pref.arr[index]
      else:
        return False
    
    if pref==self.root:
      return False
    
    return True

class Node:
  def __init__(self,data):
    self.data=data
    self.neighbors = []
    self.visited = False
  
  def addNeighbors(self,neighborNode):
    if neighborNode not in self.getNeighbors():
      self.neighbors.append(neighborNode)

  def getNeighbors(self):
    return self.neighbors


def dfs(root, node, string, trie, stringSet):
  neighbors = node.getNeighbors()
  node.visited = True
  indexed = ord(node.data) - 65
  if root.arr[indexed] != None:
    for i in range(len(neighbors)):
      n = neighbors[i]
      index = ord(n.data) - 65
      temp = root.arr[indexed]

      if temp.arr[index]!= None:
        if (trie.searchPrefix(string+n.data)):
          if n != None and not n.visited:
            if temp.arr[index].end==True:
              stringSet[string+n.data] = len(string+n.data)
            dfs(temp, n, string+n.data, trie, stringSet)
    node.visited = False
  return stringSet


##Manually Input the words

trie = Trie()

#Input the dictionary words 
numOfDictionaryWords = int(input())
for i in range(numOfDictionaryWords):
  word = input()
  if len(word)<=8 and len(word)>2:
    #inserting every word in trie
    trie.insertWord(word.upper())
input()

# ##Input words from url
# import urllib.request

# ##Text file 
# trie = Trie()
# for line in urllib.request.urlopen("http://www.mieliestronk.com/corncob_lowercase.txt"):
#   if len(line)>2:
#     print(line.strip())
#     # trie.insertWord(line.decode('utf-8').upper())

#Node for creating the board
node=[] 

#Input the num of boogle boards
numOfBoards = int(input())
board=[]
for i in range(numOfBoards):
  brd =[]
  for j in range(4):
    brd.append(input())
  board.append(brd)
  if (i != numOfBoards-1):
    input()


for i in range(numOfBoards):

  #Set nodes for each character in the boggle
  for j in range(4):
    for k in range(4):
      node.append(Node(board[i][j][k].upper()))
  
  #set neighbors
  for i in range(12):
    if i == 3 or i == 7 or i == 11:
      node[i].addNeighbors(node[i+4])
    else:
      node[i].addNeighbors(node[i+1])
      node[i].addNeighbors(node[i+4])
      node[i].addNeighbors(node[i+5])

  for i in range(4,16):
    if i == 4 or i == 8 or i == 12:
      node[i].addNeighbors(node[i-4])
    else:
      node[i].addNeighbors(node[i-5])
      node[i].addNeighbors(node[i-4])
      node[i].addNeighbors(node[i-1])

  for i in range(1,12):
    if (i==4 or i==8 or i==12):
        continue
    node[i].addNeighbors(node[i-1])
    node[i].addNeighbors(node[i+3])
    node[i].addNeighbors(node[i+4])

  
  for i in range(4,16):
    if (i==7 or i==11 or i==15):
        continue
    node[i].addNeighbors(node[i-4])
    node[i].addNeighbors(node[i-3])
    node[i].addNeighbors(node[i+1])
  
  # for i in range(16):
  #   print("Neighbors: ",node[i].data)
  #   for data in node[i].getNeighbors():
  #     print(data.data)
  
  #String Sets 
  stringSets = {}
  for i in range(16):
    stringSet = {}
    root = trie.root
    stringSets.update(dfs(root, node[i], node[i].data, trie, stringSet))
    for j in range(16):
      node[j].visited = False
  

  #For maximum Score, longest Word, and total word count
  maxLength = 0
  maxScore = 0
  wordCount = 0
  longestWord = None
  scoreSet = {3:1, 4:1, 5:2, 6:3, 7:5, 8:11}
  for str in stringSets.keys():
    if (len(str)>maxLength):
      maxLength = len(str)
      longestWord = str
    if (len(str)==maxLength):
      if (longestWord>str):
        longestWord = str
    maxScore = scoreSet[len(str)] + maxScore
    wordCount = wordCount + 1
  node.clear()
  stringSets.clear()
  print(maxScore, longestWord, wordCount)



